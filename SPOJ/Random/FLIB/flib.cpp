#include<stdio.h>
#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<map>
#include<set>
#include<vector>
#include<utility>
#include<math.h>

#define sd(x) scanf("%d",&x);
#define sd2(x,y) scanf("%d %d",&x,&y);
#define sd3(x,y,z) scanf("%d %d %d",&x,&y,&z);
#define sull(x) scanf("%ull",&x);
#define print(x) printf("%d\n",x);
#define print2(x,y) printf("%d %d\n",x,y);
#define print3(x,y,z) printf("%d %d %d\n",x,y,z);
#define printull(x) printf("%ull\n",x);

using namespace std;

long long MOD = 1000000007;

int main(){
	int t;
	long long n;
	long long M[3][3], R[3][3];
	long long t1,t2,t3,t4,t5,t6,t7,t8,t9;
	
	sd(t);
	while(t--){
		scanf("%lld",&n);
		if(n == 0){
			cout<<0<<endl;
			continue;
		}
		if(n == 1){
			cout<<2<<endl;
			continue;
		}
		M[0][0]=1, M[0][1]=5, M[0][2]=3;
		M[1][0]=0, M[1][1]=5, M[1][2]=3;
		M[2][0]=0, M[2][1]=3, M[2][2]=2;
		
		R[0][0]=1, R[0][1]=0, R[0][2]=0;
		R[1][0]=0, R[1][1]=1, R[1][2]=0;
		R[2][0]=0, R[2][1]=0, R[2][2]=1;
		n--;
		while(n > 0){
			if(n%2 == 0){
				t1 = (M[0][0] * M[0][0] + M[0][1]*M[1][0] + M[0][2]*M[2][0])%MOD;
				t2 = (M[0][0] * M[0][1] + M[0][1]*M[1][1] + M[0][2]*M[2][1])%MOD;
				t3 = (M[0][0] * M[0][2] + M[0][1]*M[1][2] + M[0][2]*M[2][2])%MOD;
	
				t4 = (M[1][0] * M[0][0] + M[1][1]*M[1][0] + M[1][2]*M[2][0])%MOD;
				t5 = (M[1][0] * M[0][1] + M[1][1]*M[1][1] + M[1][2]*M[2][1])%MOD;
				t6 = (M[1][0] * M[0][2] + M[1][1]*M[1][2] + M[1][2]*M[2][2])%MOD;
	
				t7 = (M[2][0] * M[0][0] + M[2][1]*M[1][0] + M[2][2]*M[2][0])%MOD;
				t8 = (M[2][0] * M[0][1] + M[2][1]*M[1][1] + M[2][2]*M[2][1])%MOD;
				t9 = (M[2][0] * M[0][2] + M[2][1]*M[1][2] + M[2][2]*M[2][2])%MOD;
	
				M[0][0]=t1, M[0][1]=t2, M[0][2]=t3;
				M[1][0]=t4, M[1][1]=t5, M[1][2]=t6;
				M[2][0]=t7, M[2][1]=t8, M[2][2]=t9;
				n = n>>1;			
			}
			else{
				t1 = (R[0][0] * M[0][0] + R[0][1]*M[1][0] + R[0][2]*M[2][0])%MOD;
				t2 = (R[0][0] * M[0][1] + R[0][1]*M[1][1] + R[0][2]*M[2][1])%MOD;
				t3 = (R[0][0] * M[0][2] + R[0][1]*M[1][2] + R[0][2]*M[2][2])%MOD;

				t4 = (R[1][0] * M[0][0] + R[1][1]*M[1][0] + R[1][2]*M[2][0])%MOD;
				t5 = (R[1][0] * M[0][1] + R[1][1]*M[1][1] + R[1][2]*M[2][1])%MOD;
				t6 = (R[1][0] * M[0][2] + R[1][1]*M[1][2] + R[1][2]*M[2][2])%MOD;
	
				t7 = (R[2][0] * M[0][0] + R[2][1]*M[1][0] + R[2][2]*M[2][0])%MOD;
				t8 = (R[2][0] * M[0][1] + R[2][1]*M[1][1] + R[2][2]*M[2][1])%MOD;
				t9 = (R[2][0] * M[0][2] + R[2][1]*M[1][2] + R[2][2]*M[2][2])%MOD;
	
				R[0][0]=t1, R[0][1]=t2, R[0][2]=t3;
				R[1][0]=t4, R[1][1]=t5, R[1][2]=t6;
				R[2][0]=t7, R[2][1]=t8, R[2][2]=t9;
				
				
				t1 = (M[0][0] * M[0][0] + M[0][1]*M[1][0] + M[0][2]*M[2][0])%MOD;
				t2 = (M[0][0] * M[0][1] + M[0][1]*M[1][1] + M[0][2]*M[2][1])%MOD;
				t3 = (M[0][0] * M[0][2] + M[0][1]*M[1][2] + M[0][2]*M[2][2])%MOD;
	
				t4 = (M[1][0] * M[0][0] + M[1][1]*M[1][0] + M[1][2]*M[2][0])%MOD;
				t5 = (M[1][0] * M[0][1] + M[1][1]*M[1][1] + M[1][2]*M[2][1])%MOD;
				t6 = (M[1][0] * M[0][2] + M[1][1]*M[1][2] + M[1][2]*M[2][2])%MOD;
	
				t7 = (M[2][0] * M[0][0] + M[2][1]*M[1][0] + M[2][2]*M[2][0])%MOD;
				t8 = (M[2][0] * M[0][1] + M[2][1]*M[1][1] + M[2][2]*M[2][1])%MOD;
				t9 = (M[2][0] * M[0][2] + M[2][1]*M[1][2] + M[2][2]*M[2][2])%MOD;
	
				M[0][0]=t1, M[0][1]=t2, M[0][2]=t3;
				M[1][0]=t4, M[1][1]=t5, M[1][2]=t6;
				M[2][0]=t7, M[2][1]=t8, M[2][2]=t9;
				n = (n-1)>>1;
			}
			//cout<<R[0][0]<<"\t"<<R[0][1]<<"\t"<<R[0][2]<<endl;
			//cout<<R[1][0]<<"\t"<<R[1][1]<<"\t"<<R[1][2]<<endl;
			//cout<<R[2][0]<<"\t"<<R[2][1]<<"\t"<<R[2][2]<<endl;
		}
		
		printf("%lld\n",(2*R[0][0] + 2*R[0][1] + R[0][2])%MOD);
		
	}
	return 0;
}
